generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int           @id @unique @default(autoincrement())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  phoneNum      String?
  role          String
  refresh_token String?       @db.VarChar(255)
  student       Student?
  coordinator   Coordinator?
  careerCenter  CareerCenter?
  chats         Chat[]        @relation("chat_users")
  messagesSent  Message[]     @relation("messages_sent")
  messagesReceived Message[]  @relation("messages_received")
  notifications Notification[]
}
model Notification {
  id      Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  read    Boolean @default(false)
  message String

  user    User    @relation(fields: [userId], references: [id])
  userId  Int
}

model Student {
  id                     Int              @id @unique @default(autoincrement())
  user                   User             @relation(fields: [userId], references: [id])
  userId                 Int              @unique
  department             Department       @relation(fields: [departmentId], references: [id])
  departmentId           String
  studentNumber          String
  studentInternshipForms InternshipForm[]
  letterRequests       LetterRequest[]

}

model Coordinator {
  id                         Int                       @id @unique @default(autoincrement())
  user                       User                      @relation(fields: [userId], references: [id])
  userId                     Int                       @unique
  department                 Department?
  coordinatedInternshipForms  InternshipForm[]
  letterRequests             LetterRequest[]
  signature                  Signature?
  careerCenter               CareerCenter?             @relation("CareerCenterCoordinator", fields: [careerCenterId], references: [id])
  careerCenterId             Int?
  reportFormURL                String?                   @db.VarChar(255)   // Store the URL of the report file
  applicationFormURL           String?                   @db.VarChar(255)   // Store the URL of the application file
}

model Signature {
  id              Int       @id @unique @default(autoincrement())
  createdAt       DateTime  @default(now())
  imageURL        String    @db.LongText   // Store the URL of the signature image
  coordinator     Coordinator @relation(fields: [coordinatorId], references: [id])
  coordinatorId   Int       @unique
}

model CareerCenter {
  id                          Int                     @id @unique @default(autoincrement())
  user                        User                    @relation(fields: [userId], references: [id])
  userId                      Int                     @unique
  companyName                 String                  @unique
  coordinators                Coordinator[]           @relation("CareerCenterCoordinator")
  internshipForms             InternshipForm[]
  internshipOpportunities  InternshipOpportunity[]

}

// Department model
model Department {
  id            String      @id @unique
  name          String      @unique
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])
  coordinatorId Int?         @unique
  students      Student[]
}


model InternshipForm {
  id                  String        @id @default(uuid()) @unique
  coordinator     Coordinator  @relation(fields: [coordinatorId], references: [id])
  coordinatorId   Int
  student         Student      @relation(fields: [studentId], references: [id])
  studentId       Int
  careerCenter    CareerCenter? @relation(fields: [careerCenterId], references: [id])
  careerCenterId  Int?
  applicationDate DateTime     @default(now())
  status          String
  transcriptFileURL  String?       @db.VarChar(255)   // Store the URL of the transcript file
  applicationFileURL  String?       @db.VarChar(255)   // Store the URL of the application file
  rejectionReason    String?
  responseDate    DateTime?
  sgkFileURL          String?       @db.VarChar(255)   // Store the URL of the sgk file
  sgkStatus           String?
}

model LetterRequest {
  id                  String        @id @default(uuid()) @unique
  student             Student       @relation(fields: [studentId], references: [id])
  studentId           Int
  coordinator         Coordinator   @relation(fields: [coordinatorId], references: [id])
  coordinatorId       Int
  requestDate         DateTime      @default(now())
  approvalDate        DateTime?
  transcriptFileURL   String?       @db.VarChar(255)   // Store the URL of the transcript file
  status              String        @default("pending")
  Letter              String?       @db.VarChar(255)   // Store the URL of the letter
  rejectionReason     String?

}
model InternshipOpportunity {
  id                  Int      @id @unique @default(autoincrement())
  title               String
  company             String
  website             String?
  location            String
  startDate           DateTime?
  endDate             DateTime?
  description         String
  requirements        String
  isPaid              Boolean
  amount              Int?
  applicationLink     String
  contactEmail        String
  contactPhone        String
  department          String?
  applicationDeadline DateTime

  createdAt           DateTime @default(now())
  updatedAt           DateTime? @updatedAt

  careerCenter        CareerCenter @relation(fields: [careerCenterId], references: [id])
  careerCenterId      Int
}







model Chat {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]    @relation("chat_users")
  messages  Message[]
}

model Message {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  title       String?
  subject     String?
  text        String
  chat        Chat       @relation(fields: [chatId], references: [id])
  chatId      Int
  sender      User       @relation("messages_sent", fields: [senderId], references: [id])
  senderId    Int
  receiver    User       @relation("messages_received", fields: [receiverId], references: [id])
  receiverId  Int
  attachments Attachment[]
  read        Boolean    @default(false)
}

model Attachment {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
}

